/**
 * Created by NICK on 15/11/25.
 * email:nick121212@126.com
 * qq:289412378
 * copyright NICK
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define(["require", "exports", "common/common/controller/grid_material_controller"], function (require, exports, base) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var GridController = (function (_super) {
        __extends(GridController, _super);
        function GridController() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.serverInterfaces = {};
            _this.searchData = {};
            return _this;
        }
        GridController.prototype.clearWhere = function () {
            var p;
            for (p in this.queryData.where) {
                delete this.queryData.where[p];
            }
        };
        GridController.prototype.resetSearch = function () {
            this.clearWhere();
            this.searchData = {};
        };
        /*
         * 搜索
         * */
        GridController.prototype.doSearch = function (form) {
            var searchFilters = {}, p, str;
            if (true || form.$dirty) {
                this.clearWhere();
                for (p in this.searchData) {
                    if (!this.searchData.hasOwnProperty(p))
                        continue;
                    if (p.search('r-') == 0) {
                        this.queryData.where[p.replace('r-', '')] = this.searchData[p];
                    }
                }
                form.$setPristine();
                this.onPageChange(1, this.queryData.pageCount);
                this.getServerData();
                this.$sForm = form;
            }
        };
        GridController.prototype.confirm = function (opts, serverInterfaces, filterData, success) {
            var _this = this;
            if (filterData === void 0) { filterData = function () {
            }; }
            if (success === void 0) { success = function () {
            }; }
            var confirm = this.$mdDialog.confirm()
                .title(opts.title)
                .content(opts.content)
                .targetEvent(opts.$event)
                .ok(opts.ok || "确定")
                .cancel(opts.cancel || "取消");
            var promises = {};
            if (this.selected.length > 0 || opts.ignoreSelection) {
                this.$mdDialog.show(confirm).then(function () {
                    angular.forEach(serverInterfaces, function (fn, key) {
                        promises[key] = fn((filterData && filterData.call(_this, _this.selected)) || _this.selected);
                    });
                    _this.deferred = _this.$q.all(promises).then(function (data) {
                        opts.isRefresh && _this.getServerData();
                        _this.showMsg('执行成功!');
                        success && success.call(_this, data);
                    });
                });
            }
        };
        /*
         * 拉取服务器数据
         * */
        GridController.prototype.getServerData = function () {
            var _this = this;
            var promises = {};
            if (this.isBusy)
                return;
            //this.clearSelected();
            this.isBusy = true;
            this.abort();
            angular.forEach(this.serverInterfaces, function (fn, key) {
                promises[key] = fn();
            });
            if (this.searchMode) {
                angular.extend(this.queryData.where, this.defQuery);
            }
            else {
                this.clearWhere();
                angular.extend(this.queryData.where, this.defQuery);
            }
            this.deferred = this.$q.all(promises).then(function (data) {
                _this.clientData = _this.dataFilter(data);
            }, function (data) {
                //console.log(data);
            }).finally(function () {
                _this.isBusy = false;
            });
            return this.deferred;
        };
        return GridController;
    }(base.GridController));
    exports.GridController = GridController;
});
//# sourceMappingURL=grid_material_controller.js.map